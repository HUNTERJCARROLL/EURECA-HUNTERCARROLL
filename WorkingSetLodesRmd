---
title: "R Notebook"
output: html_notebook
---

First, these are the packages required to run the following trunks.

```{r}

#install.packages("psych")
library(psych)
library(gt)
library(tidyverse)

#install.packages("plyr")
library(plyr)
#install.packages("stringr")
library(stringr)
library(readr)
#install.packages("spdep")
library("spdep")
library(rgdal)
#install.packages("sf")
library(sf)
#install.packages("tidycensus")
library(tidycensus)
#install.packages("tigris")
library(tigris)
options(tigris_use_cache = TRUE)
#install.packages("mapview")
library(mapview)
#install.packages("leafsync")
library(leafsync)
#install.packages("systemfonts", type = "binary")
library(systemfonts)
library(stringr)
#install.packages("sf")
library(sf)
#install.packages("tidycensus")
library(tidycensus)
#install.packages("tigris")
library(tigris)
options(tigris_use_cache = TRUE)
#install.packages("mapview")
library(mapview)
#install.packages("leafsync")
library(leafsync)
#install.packages("systemfonts", type = "binary")
library(systemfonts)
#install.packages("dplyr")
library(dplyr)
#install.packages(stringr)
library(stringr)
#install.packages("devtools")
library(devtools)
#install.packages("lehdr")
library(lehdr)
library(readr)
#devtools::install_github("jamgreen/lehdr")
#install.packages("dplyr")
library(dplyr)
#install.packages(stringr)
library(stringr)
#install.packages("devtools")
library(devtools)
#install.packages("lehdr")
library(lehdr)
library(readr)
#install.packages("spdep")
library("spdep")
library(rgdal)
#install.packages("sf")
library(sf)
#install.packages("tidycensus")
library(tidycensus)
#install.packages("tigris")
library(tigris)
options(tigris_use_cache = TRUE)
#install.packages("mapview")
library(mapview)
#install.packages("leafsync")
library(leafsync)
#install.packages("systemfonts", type = "binary")
library(systemfonts)
library(stringr)

library("spdep")
library(rgdal)
library(sf)
library(tidycensus)
library(tigris)
options(tigris_use_cache = TRUE)
library(mapview)
library(leafsync)
library(systemfonts)
library(stringr)
#library(vtable)
#library(stargazer)
```

Second, since we are working in the Colorado Specific framework we want to load in data that corresponds with RAC for 2019 from the census LODES parent directory. Then we want to load in the data from the WAC 2018 data (Latest year possible). Among this, census data for all tracts that include variables such as percent Hispanic or percent white. Furthermore, we must load in the RAC and WAC travel times (commute data). Then, we will finally load in the pollution source data.

```{r}
#RAC data for 2019, we will also pad all GEOIDs with a leading zero and remain h_tract to GEOID so that our data moving forward has corresponding columns. 

RAC2019 <- read.csv("RAC2019.csv")
RAC2019$h_tract <- str_pad(RAC2019$h_tract, 11, pad = '0')
colnames(RAC2019)[colnames(RAC2019)=='h_tract'] <- "GEOID"

#Next we want to load in the WAC data from 2018, we will also pad this data with a leading zero and rename the variable w_tract to GEOID for later merging. 

WAC <- read.csv("C:/Users/hunte/Desktop/EURECA/2016WAC.csv")
WAC$w_tract <- str_pad(WAC$w_tract, 11, pad = '0')
colnames(WAC)[colnames(WAC)=='w_tract'] <- "GEOID"

#Next we will load in the corresponding travel time data, however, we do have to rename all the columns due to a read in issue that code will be displayexd below.  


RACTravelTimes <- read.csv("C:/Users/hunte/Desktop/EURECA/RACTravelTimes.csv")
colnames(RACTravelTimes)[colnames(RACTravelTimes)=='A102110...Travel.time.to.work..12...Workers.16.years.and.over.'] <- "NAME"
colnames(RACTravelTimes)[colnames(RACTravelTimes)=='X'] <- "All Workers Estimate"
colnames(RACTravelTimes)[colnames(RACTravelTimes)=='X.1'] <- "Margin  Error "
colnames(RACTravelTimes)[colnames(RACTravelTimes)=='X.2'] <- "Did not work at home: Estimate"
colnames(RACTravelTimes)[colnames(RACTravelTimes)=='X.3'] <- "MArgin of Error"
colnames(RACTravelTimes)[colnames(RACTravelTimes)=='X.4'] <- "Less tha 5 minutes: Estimate"
colnames(RACTravelTimes)[colnames(RACTravelTimes)=='X.5'] <- "Margin of Error"
colnames(RACTravelTimes)[colnames(RACTravelTimes)=='X.6'] <- "5 to 14 minutes: Estimate"
colnames(RACTravelTimes)[colnames(RACTravelTimes)=='X.7'] <- "Margin of error"
colnames(RACTravelTimes)[colnames(RACTravelTimes)=='X.8'] <- "15 to 19 minutes: Estimate"
colnames(RACTravelTimes)[colnames(RACTravelTimes)=='X.9'] <- "Margin of Error"
colnames(RACTravelTimes)[colnames(RACTravelTimes)=='X.10'] <- "20 to 29 minutes: Estimate"
colnames(RACTravelTimes)[colnames(RACTravelTimes)=='X.11'] <- "Margin of Error"
colnames(RACTravelTimes)[colnames(RACTravelTimes)=='X.12'] <- "30 to 44 Minutes: Estimate"
colnames(RACTravelTimes)[colnames(RACTravelTimes)=='X.13'] <- "Margin of Error"
colnames(RACTravelTimes)[colnames(RACTravelTimes)=='X.14'] <- "45 to 59 minutes: Estimate"
colnames(RACTravelTimes)[colnames(RACTravelTimes)=='X.15'] <- "Margin of Error"
colnames(RACTravelTimes)[colnames(RACTravelTimes)=='X.16'] <- "60 to 74 minutes: Estimate"
colnames(RACTravelTimes)[colnames(RACTravelTimes)=='X.17'] <- "Margin of Error"
colnames(RACTravelTimes)[colnames(RACTravelTimes)=='X.18'] <- "70 to 89 minutes: Estimate"
colnames(RACTravelTimes)[colnames(RACTravelTimes)=='X.19'] <- "Margin of Error"
colnames(RACTravelTimes)[colnames(RACTravelTimes)=='X.20'] <- "90 minutes of more: Estimate"
colnames(RACTravelTimes)[colnames(RACTravelTimes)=='X.21'] <- "Margin of Error"
colnames(RACTravelTimes)[colnames(RACTravelTimes)=='X.22'] <- "Worked at home: Estimate"
colnames(RACTravelTimes)[colnames(RACTravelTimes)=='X.23'] <- "Margin of Error"



WACTravelTimes <-read.csv("C:/Users/hunte/Desktop/EURECA/WACTravelTimes.csv")
colnames(WACTravelTimes)[colnames(WACTravelTimes)==' A202113...Travel.time..12...Workers.16.years.and.over.'] <- "NAME"
colnames(WACTravelTimes)[colnames(WACTravelTimes)=='X'] <- "All Workers Estimate"
colnames(WACTravelTimes)[colnames(WACTravelTimes)=='X.1'] <- "Margin  Error "
colnames(WACTravelTimes)[colnames(WACTravelTimes)=='X.2'] <- "Did not work at home: Estimate"
colnames(WACTravelTimes)[colnames(WACTravelTimes)=='X.3'] <- "Margin of Error"
colnames(WACTravelTimes)[colnames(WACTravelTimes)=='X.4'] <- "Less tha 5 minutes: Estimate"
colnames(WACTravelTimes)[colnames(WACTravelTimes)=='X.5'] <- "Margin of Error"
colnames(WACTravelTimes)[colnames(WACTravelTimes)=='X.6'] <- "5 to 14 minutes: Estimate"
colnames(WACTravelTimes)[colnames(WACTravelTimes)=='X.7'] <- "Margin of error"
colnames(WACTravelTimes)[colnames(WACTravelTimes)=='X.8'] <- "15 to 19 minutes: Estimate"
colnames(WACTravelTimes)[colnames(WACTravelTimes)=='X.9'] <- "Margin of Error"
colnames(WACTravelTimes)[colnames(WACTravelTimes)=='X.10'] <- "20 to 29 minutes: Estimate"
colnames(WACTravelTimes)[colnames(WACTravelTimes)=='X.11'] <- "Margin of Error"
colnames(WACTravelTimes)[colnames(WACTravelTimes)=='X.12'] <- "30 to 44 Minutes: Estimate"
colnames(WACTravelTimes)[colnames(WACTravelTimes)=='X.13'] <- "Margin of Error"
colnames(WACTravelTimes)[colnames(WACTravelTimes)=='X.14'] <- "45 to 59 minutes: Estimate"
colnames(WACTravelTimes)[colnames(WACTravelTimes)=='X.15'] <- "Margin of Error"
colnames(WACTravelTimes)[colnames(WACTravelTimes)=='X.16'] <- "60 to 74 minutes: Estimate"
colnames(WACTravelTimes)[colnames(WACTravelTimes)=='X.17'] <- "Margin of Error"
colnames(WACTravelTimes)[colnames(WACTravelTimes)=='X.18'] <- "70 to 89 minutes: Estimate"
colnames(WACTravelTimes)[colnames(WACTravelTimes)=='X.19'] <- "Margin of Error"
colnames(WACTravelTimes)[colnames(WACTravelTimes)=='X.20'] <- "90 minutes of more: Estimate"
colnames(WACTravelTimes)[colnames(WACTravelTimes)=='X.21'] <- "Margin of Error"
colnames(WACTravelTimes)[colnames(WACTravelTimes)=='X.22'] <- "Worked at home: Estimate"
colnames(WACTravelTimes)[colnames(WACTravelTimes)=='X.23'] <- "Margin of Error"

#Next, we load in the Census Data for 2019, furthermore, we pad the GEOID with a leading zero, 

census_data2019 <- read.csv("census.data2019.csv")
census_data2019$GEOID <- str_pad(census_data2019$GEOID, 11, pad = '0')

#Next we will load in the PM source data for tract level we also have to pad the GEOID and rename the column for the merge,

PMSOURCE <- read.csv("tract_pm_source_2000_2018.csv")
PMSOURCE$ID <- str_pad(PMSOURCE$ID, 11, pad = '0')
colnames(PMSOURCE)[colnames(PMSOURCE)=='ID'] <- "GEOID"

#Next we should load in the shapefile for colorado and write it as a CSV and then a shapefile using the "sf" function, 

CO <- tracts(state = "CO", year = 2019)
#st_write( CO, "CO.shp", driver="ESRI shapefile")
CO<- read_sf('/users/hunte/Desktop/EURECA/CO.shp')
colnames(CO)[colnames(CO)=='NAME'] <- "Column"
colnames(CO)[colnames(CO)=='NAMELSAD'] <- "NAME"


```

Next we need to merge all the given data sets in order to create one that is centeralized around colorado shapefile characteristics. The merge function will automatically filter to Colorado data.

```{r}

Firstmerge<- merge(RAC2019, CO, by="GEOID")
secondmerge<-  merge(census_data2019, RACTravelTimes, by="NAME")
Thirdmerge<- merge(Firstmerge, secondmerge, by="GEOID")
MergedDataCO<- merge(Thirdmerge, PMSOURCE, by="GEOID")



```

Next we will create summary statistics for RAC data,

```{r}


#First we will use the dependent variables: Toxcity values in residential tract:



dependentvariable<- describe(MergedDataCO[,c("pm_2018")])

#Second Independent Variables: Proportion Black in RAC: 
#Third, Independent Variable: Proportion Hispanic in RAC

#Fourth, Independent Variable: Median Income Residents in Tract: 

#Fifth, Independent Variable: Proportion Residents Employed in Manufacturing: 


#Sixth, Independent Variable: Median out-commute time of residents From Home Tract: 
independentvariables<- describe(MergedDataCO[,c("pcthispanic", "pctblack", "medhhincome", "CNS05","Less tha 5 minutes: Estimate", "5 to 14 minutes: Estimate", "15 to 19 minutes: Estimate", "20 to 29 minutes: Estimate","30 to 44 Minutes: Estimate", "30 to 44 Minutes: Estimate", "45 to 59 minutes: Estimate", "60 to 74 minutes: Estimate", "70 to 89 minutes: Estimate", "90 minutes of more: Estimate" )]) 




#Now, I will create a table displaying summary statistics for the RAC data in Colorado for 2019, 

DATAANALYSIS<- rbind(dependentvariable, independentvariables)
row.names(DATAANALYSIS)[row.names(DATAANALYSIS)=="X1"]<- "PM (Dependent Variable)"



 DATAANALYSIS %>%  gt(rownames_to_stub = TRUE) %>% tab_header(title = md("Variable Descriptives for Colorado Residential Area Characteristics, 2019 (N=1239 Tracts)"), subtitle = md('*Colorado Data Analysis by Tract*')) %>% opt_align_table_header(align = "left")%>% fmt_number(columns = everything())%>% tab_style(
   locations = cells_body(
     columns = everything(),
     rows = "PM (Dependent Variable)"
   ),
   style = list(
     cell_fill(color = "#5599FF"), 
      cell_text(color = "white")
   )
   )%>% tab_source_note(source_note = md("Source:Dataset is from ACS Census Data 2019. Pollution Source data is from"))%>% tab_footnote(footnote = "PM data from 2018 is our Dependent Variable.", locations = cells_stub(rows = "PM (Dependent Variable)"))


  
```

Next, I will create summary statistics for WAC data in 2019.

Next we will create summary statistics for RAC data,

```{r}

colnames(WACTravelTimes)[colnames(WACTravelTimes)=="A202113...Travel.time..12...Workers.16.years.and.over."]<- "NAME"
head(WACTravelTimes)

Firstmerge2<- merge(WAC, CO, by="GEOID")
secondmerge2<-  merge(census_data2019, WACTravelTimes, by="NAME")
Thirdmerge2<- merge(Firstmerge, secondmerge, by="GEOID")
MergedDataCOWAC<- merge(Thirdmerge, PMSOURCE, by="GEOID")

#First we will use the dependent variables: Toxcity values in residential tract:



dependentvariable<- describe(MergedDataCOWAC[,c("pm_2018")])

#Second Independent Variables: Proportion Black in RAC: 
#Third, Independent Variable: Proportion Hispanic in RAC

#Fourth, Independent Variable: Median Income Residents in Tract: 

#Fifth, Independent Variable: Proportion Residents Employed in Manufacturing: 


#Sixth, Independent Variable: Median out-commute time of residents From Home Tract: 
independentvariables<- describe(MergedDataCOWAC[,c("pcthispanic", "pctblack", "medhhincome", "CNS05","Less tha 5 minutes: Estimate", "5 to 14 minutes: Estimate", "15 to 19 minutes: Estimate", "20 to 29 minutes: Estimate","30 to 44 Minutes: Estimate", "30 to 44 Minutes: Estimate", "45 to 59 minutes: Estimate", "60 to 74 minutes: Estimate", "70 to 89 minutes: Estimate", "90 minutes of more: Estimate" )]) 




#Now, I will create a table displaying summary statistics for the RAC data in Colorado for 2019, 

DATAANALYSISWAC<- rbind(dependentvariable, independentvariables)
row.names(DATAANALYSISWAC)[row.names(DATAANALYSISWAC)=="X1"]<- "PM (Dependent Variable)"



 DATAANALYSISWAC %>%  gt(rownames_to_stub = TRUE) %>% tab_header(title = md("Variable Descriptives for Colorado Workerplace Area Characteristics, 2019 (N=452 Tracts)"), subtitle = md('*Colorado Data Analysis by Tract*')) %>% opt_align_table_header(align = "left")%>% fmt_number(columns = everything())%>% tab_style(
   locations = cells_body(
     columns = everything(),
     rows = "PM (Dependent Variable)"
   ),
   style = list(
     cell_fill(color = "#5599FF"), 
      cell_text(color = "white")
   )
   )%>% tab_source_note(source_note = md("Source:Dataset is from ACS Census Data 2019. Pollution Source data is from"))%>% tab_footnote(footnote = "PM data from 2018 is our Dependent Variable.", locations = cells_stub(rows = "PM (Dependent Variable)"))


  
```

Next, we will plot the data for Colorado Workplace Area Characteristics and Residential Area Characteristics using the Mapview function:

```{r}
library(sf)


WACPollution<- st_as_sf(MergedDataCOWAC)
RACPollution<- st_as_sf(MergedDataCO)

#The code below is for non-moving views of the pollution data. 
#mapview(WACPollution["pm_2016"], col.regions=c("red", "blue"),  trim = mapviewGetOption("trim"), viewer.suppress = fals mapviewGetOption("viewer.suppress"))



```

```{r}


mapview(list(RACPollution["pm_2018"]), col.regions=c("blue", "red"))


mapview(list(RACPollution),
        zcol = list( "pm_2018"),
        legend = list(TRUE),
        homebutton = list(TRUE), col.regions=c("blue", "red"))



mapview(list(WACPollution),
        zcol = list( "pm_2018"),
        legend = list(TRUE),
        homebutton = list(TRUE), col.regions=c("blue", "red"))

update.packages(ask = FALSE)

```
